package generator

import (
	"bytes"
	"go/ast"
	"go/format"
	"go/printer"
	"io/ioutil"
)

// File define a parsed file.
type file struct {
	pkg  *Package
	ast  *ast.File
	name string
	dir  string
}

func (f *file) generateContent(release bool) (content []byte, err error) {
	buf := bytes.Buffer{}
	buf.WriteString("// Code generated by Debuggo. DO NOT EDIT.\n\n")

	if release {
		buf.WriteString("\n// +build !" + f.pkg.name + "\n\n")
		err = f.generateReleaseContent(&buf)
	} else {
		buf.WriteString("\n// +build " + f.pkg.name + "\n\n")
		err = f.generateDebugContent(&buf)
	}

	// Generate and format
	if err != nil {
		return buf.Bytes(), err
	}

	content, err = format.Source(buf.Bytes())
	if err != nil {
		return content, err
	}

	return
}

// TODO Edit AST for DebuggoFunction and duplicate const.
func (f *file) generateDebugContent(buf *bytes.Buffer) error {
	// Just copy source file
	path := f.dir + "/" + f.name
	src, err := ioutil.ReadFile(path)
	if err != nil {
		return err
	}

	buf.Write(src)

	return nil
}

func (f *file) generateReleaseContent(buf *bytes.Buffer) error {
	parser := newParser()
	parser.parse(f.ast)

	printer.Fprint(buf, f.pkg.fset, f.ast)

	return nil
}
